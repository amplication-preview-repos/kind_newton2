/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ExchangeRate } from "./ExchangeRate";
import { ExchangeRateCountArgs } from "./ExchangeRateCountArgs";
import { ExchangeRateFindManyArgs } from "./ExchangeRateFindManyArgs";
import { ExchangeRateFindUniqueArgs } from "./ExchangeRateFindUniqueArgs";
import { CreateExchangeRateArgs } from "./CreateExchangeRateArgs";
import { UpdateExchangeRateArgs } from "./UpdateExchangeRateArgs";
import { DeleteExchangeRateArgs } from "./DeleteExchangeRateArgs";
import { ExchangeRateService } from "../exchangeRate.service";
@graphql.Resolver(() => ExchangeRate)
export class ExchangeRateResolverBase {
  constructor(protected readonly service: ExchangeRateService) {}

  async _exchangeRatesMeta(
    @graphql.Args() args: ExchangeRateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ExchangeRate])
  async exchangeRates(
    @graphql.Args() args: ExchangeRateFindManyArgs
  ): Promise<ExchangeRate[]> {
    return this.service.exchangeRates(args);
  }

  @graphql.Query(() => ExchangeRate, { nullable: true })
  async exchangeRate(
    @graphql.Args() args: ExchangeRateFindUniqueArgs
  ): Promise<ExchangeRate | null> {
    const result = await this.service.exchangeRate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ExchangeRate)
  async createExchangeRate(
    @graphql.Args() args: CreateExchangeRateArgs
  ): Promise<ExchangeRate> {
    return await this.service.createExchangeRate({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ExchangeRate)
  async updateExchangeRate(
    @graphql.Args() args: UpdateExchangeRateArgs
  ): Promise<ExchangeRate | null> {
    try {
      return await this.service.updateExchangeRate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExchangeRate)
  async deleteExchangeRate(
    @graphql.Args() args: DeleteExchangeRateArgs
  ): Promise<ExchangeRate | null> {
    try {
      return await this.service.deleteExchangeRate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
