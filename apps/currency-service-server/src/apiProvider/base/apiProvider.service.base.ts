/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ApiProvider as PrismaApiProvider } from "@prisma/client";

export class ApiProviderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ApiProviderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.apiProvider.count(args);
  }

  async apiProviders(
    args: Prisma.ApiProviderFindManyArgs
  ): Promise<PrismaApiProvider[]> {
    return this.prisma.apiProvider.findMany(args);
  }
  async apiProvider(
    args: Prisma.ApiProviderFindUniqueArgs
  ): Promise<PrismaApiProvider | null> {
    return this.prisma.apiProvider.findUnique(args);
  }
  async createApiProvider(
    args: Prisma.ApiProviderCreateArgs
  ): Promise<PrismaApiProvider> {
    return this.prisma.apiProvider.create(args);
  }
  async updateApiProvider(
    args: Prisma.ApiProviderUpdateArgs
  ): Promise<PrismaApiProvider> {
    return this.prisma.apiProvider.update(args);
  }
  async deleteApiProvider(
    args: Prisma.ApiProviderDeleteArgs
  ): Promise<PrismaApiProvider> {
    return this.prisma.apiProvider.delete(args);
  }
}
