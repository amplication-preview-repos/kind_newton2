/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ApiProviderService } from "../apiProvider.service";
import { ApiProviderCreateInput } from "./ApiProviderCreateInput";
import { ApiProvider } from "./ApiProvider";
import { ApiProviderFindManyArgs } from "./ApiProviderFindManyArgs";
import { ApiProviderWhereUniqueInput } from "./ApiProviderWhereUniqueInput";
import { ApiProviderUpdateInput } from "./ApiProviderUpdateInput";

export class ApiProviderControllerBase {
  constructor(protected readonly service: ApiProviderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApiProvider })
  async createApiProvider(
    @common.Body() data: ApiProviderCreateInput
  ): Promise<ApiProvider> {
    return await this.service.createApiProvider({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        apiKey: true,
        name: true,
        endpoint: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ApiProvider] })
  @ApiNestedQuery(ApiProviderFindManyArgs)
  async apiProviders(@common.Req() request: Request): Promise<ApiProvider[]> {
    const args = plainToClass(ApiProviderFindManyArgs, request.query);
    return this.service.apiProviders({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        apiKey: true,
        name: true,
        endpoint: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApiProvider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async apiProvider(
    @common.Param() params: ApiProviderWhereUniqueInput
  ): Promise<ApiProvider | null> {
    const result = await this.service.apiProvider({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        apiKey: true,
        name: true,
        endpoint: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApiProvider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateApiProvider(
    @common.Param() params: ApiProviderWhereUniqueInput,
    @common.Body() data: ApiProviderUpdateInput
  ): Promise<ApiProvider | null> {
    try {
      return await this.service.updateApiProvider({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          apiKey: true,
          name: true,
          endpoint: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApiProvider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteApiProvider(
    @common.Param() params: ApiProviderWhereUniqueInput
  ): Promise<ApiProvider | null> {
    try {
      return await this.service.deleteApiProvider({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          apiKey: true,
          name: true,
          endpoint: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
